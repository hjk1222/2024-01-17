@charset "utf-8";

/* html5 */
/* css3 */
/* scss : 그룹을 져서 */
/* 바디전체를 루트라는 개념으로 가져옴 */
/* [scss] : 컬러스타일가이드를 만드는 것처럼 내가 이름을 지정해서 써줄 수 있음!*/
:root{
    /* color */
    --primary-color : #742e2e;
    --shadow-color : #0e0e0e;
    --clock-color : #212121;
    
    /* animation time영역 (임의적 애니메이션 시계) */
    --s-animate-time : 10s;
    --m-animate-time : 60s;
    --h-animate-time : 20s;


    /* realtime 영역 (working) */
    /* 1바퀴 도는데 걸리는 초 시간에 대하여.. */
    
    /* real time animation */
    --s-rotate-time: 60s;
    --m-rotate-time: 3600s;
    --h-rotate-time: 43200s;

    /* rotate from */
    --s-rotate-from: 0deg;
    --m-rotate-from: 0deg;
    --h-rotate-from: 0deg;
    
    /* rotate to */
    --s-rotate-to: 0deg;
    --m-rotate-to: 0deg;
    --h-rotate-to: 0deg;
}


*{margin: 0; padding: 0; box-sizing: border-box;}

html{
    font-size: 10px;
}

body{
    /* background-color: #444; */
    background-color: var(--primary-color);
    min-height: 100vh;
    font-family: 'Bebas Neue', sans-serif;
    font-weight: 500;
    font-size: 1.4rem;
    /* html:10px * 1.4rem = 14px */
}

section{
    background-color: var(--clock-color);
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding:10rem;
}

.clock,
.clock_top,
.clock_center,
.hours_pointer{
    border-radius: 50%;
    border: 1px solid seashell;
}

.clock{
    width: 45rem;
    height: 45rem;
    min-width:45rem;
    min-height:45rem;
    padding: 2rem;
    background-color: var(--clock-color);
    box-shadow: 1rem 0 2rem var(--shadow-color);
    -webkit-box-shadow: 1rem 0 2rem var(--shadow-color);
    -moz-box-shadow: 1rem 0 2rem var(--shadow-color);
    position: relative;
}

.clock_center{
    width: 100%;
    height: 100%;
    background-color: var(--primary-color);
    box-shadow: 1.5rem 0 1rem var(--shadow-color);
    -webkit-box-shadow: 1rem 0 2rem var(--shadow-color);
    -moz-box-shadow: 1rem 0 2rem var(--shadow-color);

    display: grid;
    grid-template-rows: repeat(7,1fr);
    grid-template-columns: repeat(7,1fr);

    grid-template-areas:
    " . . . n12 . . . "
    " . . n11 . n1 . . "
    " . n10 . . . n2 . "
    " n9 . . . . . n3 "
    " . n8 . . . n4 . "
    " . . n7 . n5 . . "
    " . . . n6 . . . "    
    ;
    /* [주의!] 점에 공백 넣어주기!!!!!!!!!!!! 그래야 그리드 명령어 먹혀들어감...ㅋ*/

    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
}


.number{
    font-size: 3.2rem;

    /* color: var(--clock-color); */
    color: white;
    /* 숫자색 */
    line-height: 1;
    align-self: center;
    justify-self: center;
    /* border: 1px solid seagreen; */
}

.number_1{
    grid-area : n1;
    /* 이름 임의 */
    justify-self: end;
    align-self: start;
    /* self: 그리드 칸 안에서 데이터 자기 스스로의 정렬임 */
    /* border: 1px solid seagreen; */
}
.number_2{
    grid-area : n2;
    /* 이름 임의 */
    justify-self: end;
    align-self: start;    
}
.number_3{
    grid-area : n3;
    /* 이름 임의 */
    justify-self: start;
    align-self: center;  
    /* border: 1px solid seagreen; */
}
.number_4{
    grid-area : n4;
    /* 이름 임의 */
    justify-self: end;
    align-self: end;    
}
.number_5{
    grid-area : n5;
    /* 이름 임의 */
    justify-self: end;
    align-self: end;
    
}
.number_6{
    grid-area : n6;
    /* 이름 임의 */
    justify-self: center;
    align-self: start;
    
}
.number_7{
    grid-area : n7;
    /* 이름 임의 */
    justify-self: start;
    align-self: end;
    
}
.number_8{
    grid-area : n8;
    /* 이름 임의 */
    justify-self: start;
    align-self: end; 
    /* border: 1px solid seashell;   */
}
.number_9{
    grid-area : n9;
    /* 이름 임의 */
    justify-self: end;
    align-self: center;
}
.number_10{
    grid-area : n10;
    /* 이름 임의 */
    justify-self: start;
    align-self: start;
    /* border: 1px solid seashell;       */
}
.number_11{
    grid-area : n11;
    /* 이름 임의 */
    justify-self: start;
    align-self: start;
    
}
.number_12{
    grid-area : n12;
    /* 이름 임의 */
    justify-self: center;
    align-self: end;    
    /* border: 1px solid seagreen; */
}


.clock_top,
.hours_container,
.hours_pointer{
    height: 100%;
    width: 100%;
}

.clock_top{
    position: absolute;
    left: 0;
    top: 0;

    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
}

.hours_container{
    position: relative;
    z-index: 1;
    filter: drop-shadow(0.2rem 0 0.5rem var(--shadow-color));
}

.hours_pointer{
    background-color: var(--clock-color);
    clip-path: polygon(
        -10% -10%,
        32% -10%,
        50% 50%,
        70% -10%,
        110% -10%,
        110%  110%,
        -10% 110%);
        /* 웹키드 붙여야... */        
/* display: none; */
    /* clip-path: polygon(52% 0, 100% 38%, 82% 100%, 18% 100%, 0% 38%); */
    }

.sec_min_container{
    height: 3rem;
    width: 3rem;
    background-color: var(--clock-color);
    box-shadow: 0 0.1rem 1rem var(--shadow-color);
    border-radius: 50%;
    position: absolute;
    z-index: 2;
}

.min_container,
.sec_container{
    height: 100%;
    width: 100%;
    position: absolute;
    display: flex;
    justify-content: center;
    align-items: center;
}

.sec_pointer{
    position: absolute;
    bottom: -4rem;
    width: 0.2rem;
    /* html:10px * 0.2 = 2px */
    
    height: 22rem;
    background-color: var(--primary-color);
    box-shadow: 0 0 1rem var(--shadow-color);
    border-radius: 0.1rem;
    z-index: 0;
}
.sec_container::before{
    content: " ";
    position: absolute;
    height: 0.4rem;
    width: 0.4rem;
    background-color: var(--clock-color);
    border-radius: 50%;
    z-index: 2;
}
.sec_container::after{
    content: " ";
    position: absolute;
    height: 1.2rem;
    width: 1.2rem;
    background-color: #fff;
    border-radius: 50%;
    border: 0.2rem solid var(--primary-color);
    z-index: 1;
}

.min_pointer{
    position: absolute;
    height: 14rem;
    width: 0.2rem;
    background-color: #fff;
    border-radius: 0.15rem;
    z-index: 0;
    box-shadow: 0.5rem 0.1rem 0.8rem var(--shadow-color);
    bottom: -1.5rem;
}


/* --animation 영역 */
@keyframes animate_seconds{
    0%{transform: rotateZ(0deg);}
    90%{transform: rotateZ(360deg);}
    100%{transform: rotateZ(0deg);}
    
    /* 애니메이션에도 웹키트 붙여줄수 있음! */
    /* 100%가 되면 툭! 하고 0점 으로 되돌아오도록 걸어준거임*/
}

.animation .sec_container{
    animation: animate_seconds var(--s-animate-time) infinite linear;
    /* 여기 */
    /* linear: 시작하는 곳 동일하도록[???] */
}

.animation .min_container{
    animation: animate_minutes var(--m-animate-time) infinite linear;
}
@keyframes animate_minutes{
    to{
        transform: rotateZ(360deg);
    }
}

/* [설명] 애니메이션은 만들어놓고 어디들 불러다 쓸 수 있다. 그래서 여긴 안만들어준거임 */
.animation .hours_container{
    animation: animate_minutes var(--h-animate-time) infinite linear;
}

/* working animate 영역 */
.working .sec_container{
    transform: rotateZ(var(--s-rotate-from));
    animation: rotate_seconds var(--s-rotate-time) infinite linear;
}
.working .min_container{
    transform: rotateZ(var(--m-rotate-from));
    animation: w_sec_container_rotateZ var(--m-rotate-time) infinite linear;

}

.working .hours_container{
    transform: rotateZ(var(--h-rotate-from));
    animation: w_sec_container_rotateZ var(--h-rotate-time) infinite linear;
}

@keyframes rotate_seconds {
    from{transform: rotateZ( var(--s-rotate-from) );}
    to{transform: rotateZ( var(--s-rotate-to) );}
}
@keyframes rotate_minute {
    from{transform: rotateZ( var(--m-rotate-from) );}
    to{transform: rotateZ( var(--m-rotate-to) );}
}

@keyframes rotate_hours {
    from{transform: rotateZ( var(--h-rotate-from) );}
    to{transform: rotateZ( var(--h-rotate-to) );}
}
/* 60초에 1바퀴 돌아라 */
/* 로테이트: 각도 */




